도스 환경에서는 커서 오른쪽 버튼 클릭이 붙여넣기


모든 dbms의 작업 단위 : 테이블

column(열) = 컬럼 = 필드

row(행) = 레코드

Ajax key:value css 정의하는 것과 비슷하게
json


Server
+
l_ database
   +
    l_  collection
        +
         l_ document


mapReduce

몽고디비 사용
*web
*빅데이터
*보안
*IoT데이터 저장




이러한 데이터를,
(스키마가 있는, 데이터 포맷이 정해져있음, 컬럼이 정해진)정형데이터 라고 부른다.

실제 바깥에서 사용될 때 꼭 필요한 정형데이터

no sql = 비정형데이터를 저장하는 방법 => mongoDB or Cassandra


개발환경이 다름 = 이기종이다
=> 이런 경우 서로 호환하기 위해 만들어진것 : xml
but 파싱을 해야하는 데 너무 무거움
=> 그래서 만들어진게 json



빅데이터는 크고 다양하고 빠르게 발생하는 것
그래서 rdbms가 아니라 mongoDB같은 no sql 사용


클러스터링

no sql은 도큐먼트 구조(타입)
key-value의 구조
name:value, name:value ...


트랜잭션 : 논리적인 작업 그룹
책구매(1.구매정보 저장(insert), 2. 재고(update), 3.장바구니(delete), 4.포인트내역테이블(insert), 5. 포인트업데이트)
데이터를 처리하다가 중간에 멈추면 rollback - 했던 작업 취소 - 오류처리

commit 저장
트랜잭션을 가능하게 하는 것 = rdbms

몽고디비
1. 서버 스타트 mongd.exe
 데이터가 저장될 위치를 명시






MEAN stack 프론트부터 백까지 할 수 있는 개발자들이 사용했던 것


-------------------------------------------------------
[실행방법]
- 데이터를 저장할 폴더를 생성
 => C:\2022_IoT\data

- 환경설정 - 고급설정 - 환경변수 - path 
path로 mongodb설치 폴더의 bin폴더를 등록
  C:\Program Files\MongoDB\Server\3.6\bin


mongod --dbpath C:\2022_IoT\data
 =>몽고디비가 저장될 경로 지정 (서버 접속하는 방법)

mongo
 =>몽고 클라이언트 접속

exit
 =>끝내기

collection : 테이블과 같은 역할
document : row랑 같은 역할
field : column과 같은 역할

레코드를 구분할 수 있는 키 : primary key(pk)
=> _id field(몽고디비에서는)

show dbs


----------------------------------------------------
mongodb
 - Document oriented 데이터베이스

[용어] 
RDBMS와 비교

Database
   - collection을 담고 있는 컨테이너

Collection
   - RDBMS의 테이블과 비슷한 개념(스키마 없음) - 정해진 구조가 없다.

document
   - RDBMS에서 레코드와 비슷한 개념

Embedded document
   - 테이블의 조인과 비슷한 개념

> db.test.save({a:1})
WriteResult({ "nInserted" : 1 }) 
 => 한개의 행이 입력되었다





*****************************************************************************************************************
1. mongodb 기본 명령어
 1) 데이터베이스 만들기
 2) collection 만들기
 3) collection에 document를 추가

[명령어]
 show dbs -> 데이터베이스의 리스트를 확인
 use 데이터베이스명 -> 작업할 데이터베이스를 생성(없는 경우)
		    또는 작업하고 싶은 데이터베이스로 로그인
 db -> 현재 작업 중인 데이터베이스를 확인
 db.help() -> db로 할 수 있는 명령어들 모두 나옴
 db.stats() -> db상태 확인
 show collections -> 컬렉션 목록 확인(=select*from tab)
 cls ->창 클리어 

 db.createCollection("컬렉션명") ->컬렉션생성하기
 db.emp.renameCollection("employee") ->컬렉션 이름 바꾸기

[미션]
 - iot데이터베이스 만들기
 - sensordata컬렉션 만들기
 - sendata컬렉션
 - 현재 작업 중인 database, 현재 작업 중인 database에 저장된 collection 목록을 조회해서 캡쳐

json을 컴파일 하는게 bson


*****************************************************************************************************************
2. document삽입(데이터 insert)

   - mongodb는 데이터를 json방식으로 관리
   - 컬렉셔이 존재하지 않아도 insert를 하면 자동으로 컬렉션이 만들어진다.
   - _id가 자동으로 만들어진다.
        => 12바이트, 고유값을 저장한다.
   1) insert 메소드
       db.컬렉션명.insert({필드명1:필드값1, 필드명2:필드값2 ....})
                                             =>value는 "" 삽입
   2) 배열
    - json의 배열과 동일하게 표현
      {필드명1:["값1", "값2", "값3", ....]}
      db.emp.insert({id:"kang", pass:"1234", history:["python", 	           "django", "arduino", "mongodb"]})


db.score.insert({id:"admin", register_date:new Date()})

InsertOne
db.users.insertOne(
{name:"", age:26}
)

db.inventory.insertOne(              --------json배열 -------json객체
   { item: "canvas", qty: 100, tags: ["cotton"], size: { h: 28, w: 35.5, uom: "cm" } }
)

db.emp.insert({id:"test", name:"장동건", history:["태극기휘날리며", "이브"]})




[미션2]
- emp 컬렉션에 추가
- document 삽입
- id:park pass:7896
  checkvalue : 배열로 1, 0 , 1, 1, 1, 0의 값이 저장되도록 처리


*****************************************************************************************************************
3. document 조회
   - 컬렉션에 저장된 document 조회
   - db.컬렉션명.find()
   => select*from 테이블명과 동일
   => 컬렉션의 모든 document를 조회


*****************************************************************************************************************
 4. document 수정
   - update
   - CRUD를 위한 모든 메소드는 JSON 형식으로 정의된다.
 	[구문]
	db.collection명.update(<filter>,  -조건(sql update문의 where절)
                                             <update>, - set절(변경할 필드와 값)
                                             <option>) - update위해서 설정해야 하는 내용

	1)filter>
		업데이트를 하기 위한 조건
		{조건필드:값 ...}
	2)update>
		
		업데이트 연산자와 함께 명시               ----------------------------제일먼저찾는 도큐먼트만
		=> 업데이트 연산자를 명시하지 않으면 조건에 만족하는 document를 찾아서 저장되어 있는 모든 필드값을 지우고 명시되어 있는 컬럼으로 교체
		
		업데이트할 필드의 값
		{변경할 필드:값 ...}


	db.emp.update({id:"kim"},{pass:"123456789"})
		       ------filter    -------------- update
	=>
             cf)mariaDB 업데이트  update emp 
                                           set 열=값, 열=값 
                                           where 조건 and, or ,...

		[업데이트 연산자]
		$set: 해당필드의 값을 변경
  		=> db.emp.update({id:"kim"},{pass:"123456789"})
		    db.컬렉션명.update({조건필드:조건값}, {$set:{없데이트할 컬럼의 정보...}})
		=> db.emp.update({id:"kim"},{$set:{pass:"123456789"}})
		=> 업데이트할 필드가 존재하지 않으면 새로 추가한다.


		[업데이트 연산자2]
		$inc : 지정한 값 만큼 필드 값을 증가
		=>db.컬렉션명.update({조건필드:조건값},{$inc:{업데이트할 필드:값}})
						     ------------------------- 필드의 값이 추가된 값만큼 증가	
		
			db.emp.update({id:"kim"}, {$inc:{val:3000}}, {multi:true})


	3)option(업데이트 옵션)
  		=>업데이트할 때 기본으로 설정된 기능을 변경하고 싶은 경우 사용
		multi:true
		=> multi옵션을 true로 설정하면 조건에 만족하는 모든 document를 찾아서 필드를 변경한다.
		db.emp.update({id:"kim"}, {$set:{pass:"123456789"}}, {multi:true})
	                           filter --------    update-----------------   options------



		[구문]
		db.collection명.find(조건, 조회할 필드에 대한 정보를 정의)
		1)조건(query)
		    - 조회할 필드에 대한 정보를 json형식으로 표기

			[query연산자 - 비교연산자]
			1)$eq (equal, ==) : 주어진 조건의 값과 일치
				score컬렉션에서 java점수가 90점인 document를 조회	
				db.score.find({java:{$eq:90}}, {id:1, name:1, dept:1, addr:1})
			2)$gt (greater than, >) : 조건값보다 큰 값
				db.score.find({java:{$gt:90}}, {id:1, name:1, dept:1, addr:1})
			3)$gte (greater than or equal, >=) : 조건값보다 크거나 같은 값
			4)$lt (less than, <) : 조건값보다 작은 값 

			db.score.find({java:{$lt:97}}, {id:1, java:1, name:1, dept:1, addr:1}).pretty()
			5)$lte (less than or equal, <=) :  조건값보다 작거나 같은 값
			db.score.find({java:{$lte:97}}, {id:1, java:1, name:1, dept:1, addr:1}).pretty()
			6)$ne (not equal, !=) : 조건값과 일치하지 않는
			7)$in : sql의 select문의 in 연산자와 동일 - 조건 값이 여러 값과 비교해서 일치하는 지
		여러 값과 비교 = 배열
			db.score.find({java:{$in:[97, 98]}}).pretty()

			8)$nin : 배열에 명시한 값들과 비교해서 일치하지 않는 값을 확인
			db.score.find({java:{$nin:[97, 98]}}).pretty()


	[미션1]
	java점수가 90이상 100이하인 document조회하기
		db.score.find({java:{$gte:90, $lte:100}})
			
			[query연산자 - 논리연산자]
			-두 개 이상의 필드에서 조건을 적용
			-조건은 배열로 정의
			1)$and : 두 개 이상의 조건이 모두 true -> true
			          dept가 인사이면서 addr이 인천인 데이터를 조회	
			           db.score.find({$and:[{dept:"인사"},
					{addr:"인천"}
				]})		

			2)$not : 조건을 만족하지 않는 document와 조건을 판단할 필드가 존재하지 않는 document를 모두 조회. 단일 조건. {$not:{조건}}
				db.score.find({java:{$not:{$lte:90}}
				})

		[미션2] - dm으로 제출
		id가 song, kang, hong인 데이터를 조회
		or db.score.find({$or:[{id:"song"}, {id:"kang"}, {id:"hong"}]})
		in db.score.find({id:{$in:["song", "kang", "hong"]}})

		id가 song, kang, hong이 아닌 데이터를 조회
		nin db.score.find({id:{$nin:["song", "kang", "hong"]}})
		nor db.score.find({$nor:[{id:"song"}, {id:"kang"}, {id:"hong"}]})


			3)$nor : 정의한 모든 조건을 만족하지 않는 document 를 조회
				db.컬렉션명.find({$nor:[{조건1}, {조건2} ....]})
				db.score.find({$nor:[{dept:"인사"},
					{addr:"인천"}
				]})


			4)$or : 두 개 이상의 조건 중 하나라도 true -> true
			          dept가 인사이거나 addr이 인천인 데이터를 조회	
			           db.score.find({$or:[{dept:"총무"},
					{addr:"인천"}
				]})

		=> 같은 필드의 조건일 때는 in/nin이 낫고, 다른 필드의 조건일 때는 or/nor을 써야 한다.

			[null 비교]
			document 를 추가하고 작업해보기
			db.score.insert({id:"python", name:"파이썬", java:null})
			1) {필드명 : null}
			db.score.find({java:null}) : java필드가 없는 document를 조회,
					       java필드가 있지만 값이 null인 document도 조회	
			2) {$exists:false}
			= db.score.find({java:{$exists:false}}) =>null이라는 값도 없는 데이터만 추출. 완전히 필드가 존재하지 않는 경우.

			[Cursor메소드] -https://www.mongodb.com/docs/v3.6/reference/method/
			rdbms에서는 recordset
				     resultset
			mongoDB에서는 cursor : 조회된 결과를 찾아볼 수 있다

find()는 cursor를 return
var mycursor = db.score.find({id:"song"}) =>변수 선언
mycursor.pretty()	

	[자바스크립트 명령어를 조건으로 사용하기]
	  $where : "자바스크립트명령"
	
	   var alldata = db.score.find()
	   var size = db.score.find().count()
	  while (alldata.hasNext()){//cursor안에 저장된 document 개수만큼 반복해서 작업하겠다는 의미
		var one = alldata.next() //cursor에서 document 하나 꺼내서 반환
		one.num = 10000 //꺼낸 document에 num필드를 추가하고 10000으로 값을 저장
		db.score.save(one) //score컬렉션에 작업한 one에 저장된 document를 save
		} =>save는 덮어쓰기라 가능

var alldata = db.score.find()
var size = db.score.find().count()
while (alldata.hasNext()){
	var one = alldata.next()
	one.num = 10000
	db.score.insert(one)}    => insert하면 one이라는 도큐먼트가 새로 생성되기 때문에 오류남

shell에서 변수선언은 매번 해야함

			ⓐcount() : cursor안에 포함된 도큐먼트 개수를 반환
				db.score.find().count()
			ⓑsort({필드명:옵션값}) : 정렬
			옵션1은 오름차순(ㄱ-ㅎ)
			옵션-1은 내림차순
			
			ⓒlimit(숫자): limit에 정의한 개수만큼 document조회
			         db.score.find({}, {id:1, name:1, java:1, servlet:1}).sort({java:-1}).limit(5)
			ⓓskip(숫자) : skip에 정의한 갯수만큼 건너뛰고
				db.score.find({}, {id:1, name:1, java:1, servlet:1}).skip(3)

			ⓔdistinct("필드명")
			db.getCollection("score").distinct("필드명") => 중복을 제거한 값을 배열로 반환
			db.getCollection("score").distinct("addr").length : 사이즈를 리턴


db.score.find({$where:"this.java>90"}) => java script에서 this는 현재 작업중인 객체랑 똑같음



			[정규표현식] -JAVA, JS, PYTHON 등등에서 쓰임
			: 문자열에서 패턴과 일치하는 문자가 있는지 찾을 수 있도록 지원
				   ------ 패턴 : 문자와 기호를 이용해서 특정 문자를 찾는다.
					      문자나 기호는 내부적으로 의미를 갖고 있다.
					      거의 대부분의 언어에서 동일하게 작업
			ex) ^j : j로 시작?
			ⓐ^ : 문자열의 시작
			ⓑ$ : 문자열의 종료
			ⓒ. : 임의의 한 글자 의미(한글, 영문 상관없음)
			ⓓ| : or의 의미
				db.score.find({id:/a|p/})
			ⓔi : 대소문자 구분없이 조회
				db.score.find({id:/a|P/i})

			ⓕ/값/ : RDBMS의 like 연산과 동일 => where addr like %값%과 동일
			ⓖA-Z : 영문자 대문자
			ⓗa-z : 영문자 소문자
			ⓘ0-9 : 숫자
			ⓙ가-힣 : 한글
			ⓚ{ } : 횟수나 범위 체크 - k{5} : k가 5번 반복, a{3, 5} : a가 3번이상 5번 이하 반복
			ⓛ$regex연산자를 이용하거나 find메소드에서 사용할 수 있다.
			ⓜ [ ] : 문자의 집합이나 범위를 나타냄 => [a-z] 소문자 a에서 z사이의 모든 문자
				db.score.find({id:/[a-f]/})

=> 정규표현식은 책도 따로 있을 정도로 많다...

db.score.find({id:/kang/})
db.score.find({id:/[^a-p]/}) => 대괄호안에 ^가 들어가면 not의 의미
db.score.find({id:^/[a-p]/}) => a~p로 시작하는 id 전부
db.score.find({id:/[a-z|A-Z|0-9]/},{id:1, name:1})
db.score.remove({id:"AAAAA"})
db.score.find({}, {id:1, name:1})


		2) 조회할 필드에 대한 정보(projection)
		    - 조회하고 싶은 필드를 명시
		    - find() = find({}) 동일하며 모든 필드를 조회하라는 의미
		    - {필드명1:, ...}
				db.score.find({}, {id:1, name:1})
				db.score.find({id:"hong"}, {id:1, name:1})



	4) 배열데이터를 수정
	 - 배열데이터 추가하기
		db.score.update({id:"jang"}, {$set:{favorite:
						{city:["서울","안산"], movie:["겨울왕국", "변호인"]}
						}
					})
	  - 배열데이터를 수정하는 경우에 업데이트연산자를 이용
		[배열 업데이트 연산자]
		ⓐ$push : 배열에 요소를 추가(중복 허용)
		 db.score.update({id:"jang"}, {$push:{"favorite.city":"천안"}})
		ⓑ$addToSet : 배열에 요소를 추가(중복 허용 안됨)
		 db.score.update({id:"jang"}, {$addToSet:{"favorite.city":"인천"}})

		ⓒ$pop : 배열의 첫 번째 요소나 마지막 요소를 제거
		 db.score.update({id:"jang"}, {$pop:{"favorite.city":1}}) 옵션1 = 배열의 마지막요소 삭제
		 db.score.update({id:"jang"}, {$pop:{"favorite.city":-1}}) 옵션-1 = 배열의 첫번째 요소 삭제
		ⓓ$pull : 배열의 요소들 중 원하는 아이템을 제거
		 db.score.update({id:"jang"}, {$pull:{"favorite.city":"천안"}}) 

		ⓔ$each: addToSet이나 push에서 사용할 수 있다. 배열에 여러 개의 요소를 추가할 때 사용
		db.score.update({id:"jang"}, {$push:{"favorite.city":["천안","가평","수원"]}})
		=>배열에 요소로 여러 개가 추가되는 것이 아니라 별도의 배열이 삽입
 		=> 여러 개의 요소를 추가하는 경우 $each연산자를 사용한다.
		db.score.update({id:"jang"}, {$push:
					{"favorite.city":
						{$each:["천안","가평","수원"]}
					}})
		ⓕ$sort : 정렬(1: 오름차순, -1:내림차순)
		 db.score.update({id:"jang"}, {$push:
					{"favorite.city":
						{$each:["천안","가평","수원"], $sort:1}
					}})

		 db.score.update({id:"jang"}, {$push:
					{"favorite.city":
						{$each:["천안","가평","수원"], $sort:-1}
					}})
		ⓖ$pullAll : 배열의 요소를 제거(여러개를 조건으로 정의해서 제거하기)
		 db.score.update({id:"jang"}, {$pull:{"favorite.city":["천안","가평"]}}) => 인식못함/변경x

		 db.score.update({id:"jang"}, {$pullAll:{"favorite.city":["천안","가평"]}}) 
		


[쌤블로그:배열데이터 update/ 5번]
 db.exam.update({id:"song"}, {$push:{"lang.ms":{$each:["visual basic","asp",".net"]}}})
 db.exam.update({id:"song"}, {$set:{lang{ms:["visual basic","asp",".net"]}}})


[]: 배열
{}: 오브젝트(name과 value를 하나라도 포함할 시)

[과제 exam]
db.board.insert({no:1, id:"jang", title:"mongodb연습", content:"재밌다", count:1, writedate:new Date()})
db.board.insert({no:2, id:"kang", title:"mongodbCRUD", content:"배열어려워", count:1, writedate:new Date()})

db.board.find().pretty() => pretty메소드 체이닝 기법 - json데이터처럼 확인 가능
db.board.update({no:2}, {$set:{comment:[
				{no:1, content:"댓글1", count1:1, count2:1, writedate:new Date()},
				{no:2, content:"댓글2", count1:1, count2:1, writedate:new Date()},
				{no:3, content:"댓글3", count1:1, count2:1, writedate:new Date()}
				]}})






*****************************************************************************************************************
 5. document 삭제

db.exam.drop() -> collection 삭제

db.collection명.remove({조건})
   => update와 remove는 find에서 적용한 조건을 동일하게 사용할 수 있습니다.




