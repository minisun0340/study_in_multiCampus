1. 프로그램 다운로드 및 설치
   - https://www.python.org/접속해서 python프로그램 다운로드 
      os에 맞게 다운로드
   - https://www.jetbrains.com/ 접속해서 pycharm다운로드
     * os에 맞게 다운로드
     * 프로젝트를 만들어서 작업
     * 프로젝트별로 파일을 관리하기 위해 파이썬 패키지를 만들어서 작업
   - __init__.py : 파이썬 패키지라는 것을 알려주기 위한 파일
     3.3이전 버전에서는 이 파일이 없으면 파이썬 패키지라는 것을 인식 못함
     이전버전과 호환을 목적으로 __init__.py가 있도록 작성
2. 파이썬개요
    1) 파이썬은 인터프리터방식의 언어
    - 컴파일방식 : 컴파일방식의 언어는 모든 명령을 한꺼번에 번역한 후에 실행
                        속도가 빠르다. 한꺼번에 많은 기억장소가 필요
                        c, c++, c#, 자바
    - 인터프리터방식 : 한 줄 명령문을 읽어서 번역해서 실행하는 방식
                              속도가 느리다. 메모리가 적게 필요
                              파이썬, 스칼라, 자바스크립트....
    2) 개발방법
       - 대화형모드 : shell을 통해서 실행
       - 스크립트모드 : 텍스트파일에 파이썬 명령어를 한꺼번에 작성하고
                              순차적으로 실행해서 결과를 보는 방식
    3) 라이브러리의 활용
        - 파이썬에서 미리 기능을 만들어서 제공
        - 이 기능을 활용해서 여러가지 작업을 할 수 있다.
          ---------
           함수, 객체로 제공
        - 사용방법
          함수명(매개변수1, 매개변수2,.....)
                   ------------------------------
                  매개변수란 함수를 사용하기 위해서 외부에서 입력받아야
                  하는 값
                  매개변수를 생략하거나 여러 개를 정의할 수 있도록 지원
                  매개변수와 매개변수는 콤마로 구분해서 작업   
 
3. 표준입력 표준출력
   1) 표준입력
       - 키보드를 통해 데이터를 입력 받음(콘솔에서 입력하는 방식)
       input이라는 함수를 이용
       [형식]
       변수 = input(문자열)
                -----------------
                  input함수를 통해 입력받는 값은 문자열
                  연산을 위해서 숫자로 변환할 수 있다.
   2) 표준출력
       - 모니터를 통해 데이터를 출력
          print함수를 이용해서 처리
          * print함수에는 변수나 값 여러 개를 콤마로 구분해서 처리
          * print(값1, 값2...)
                   ---- 
                    숫자, 문자
          * print(변수1,변수2..)
          * print(변수1,변수2..,sep='구분자')
            print에 출력할 값들에 구분자를 추가할 수 있다.
          * print()함수를 이용해서 다양한 방법으로 출력이 가능
          * print("%d / %d = %d" % (값1,값2,값3))
                    ------------------    ----------------
                      출력할 형식          %d 자리에 출력될 값
              
              %기호 :  출력할 데이터의 형식을 나타내는 기호
             
             %d : 정수 (10,100,12345 ....)
             %f : 소수점이 있는 실수 (0.5,3.14,12.2...)
             %c : 한 글자("b", "김"..)
             %s : 문자열(두글자 이상 - "test","안녕",.....)

         * format함수를 이용해서 출력하기
           print함수로 결과를 출력할때 format함수를 이용해서 작업
           출력될 데이터를 {}로 표현
 
4. 변수
   프로그램 사용 중에 발생하는 데이터를 저장할 수 있는  메모리의 임의의 공간
   1) 변수 선언 
       - 변수명 = 값
       - type()을 이용해서 변수의 저장된 데이터의 타입을 확인
       - int()나 str()를 이용해서 변수의 타입을 변경할 수 있다.
         int(값 or 변수명 or 다른 명령문)
         int("123")
         int(test)
         int(input("test:"))
   2) 데이터타입
      ① 숫자 : 정수(Integer), 실수(소숫점)
      ③ 문자열 : 
      ③ 불(bool - 논리형)데이터 : 참(True)과 거짓(False)을 나타내는 자료형 
          True로 변환되는 경우
          "문자열" , 1, [1,2,4] (값이 있는 리스트), 숫자
          
          False로 변환되는 경우
          0, 0.0, None ,"", [], ()
   3) 데이터타입을 변환할 수 있는 함수
      - int(숫자모양을 하고 있는 문자열) : 문자열을 정수로 변환
      - str(문자열로 변환하고 싶은 값) : 다른 데이터타입을 문자열 타입으로 변환
      - bool(bool 형으로 변환하고 싶은 값이나 식) : 다른 타입을 bool형으로 변환
      - float(숫자모양을 하고 있는 문자열)  : 문자열을 실수로 변환 
3. 연산자
    1) 산술연산
        +
        -
        *
        /
        % : 나머지 구하기
       ** : 제곱
       // : 나머지 중 소숫점이하 버리기
     2) 비교연산자
     3) 논리연산자
4. 제어구문
   1) 조건제어문
       -  조건에 따라 실행할 명령문을 선택할 수 있도록 명령문 제어
       -  들여쓰기로 블럭을 표현할 수 있다.({ }의 역할을 들여쓰기로 표현)
       -  제어문은 중첩이 가능하다.
          * if문에서 if문을 사용할 수 있다.
            else문에서 if문을 사용할 수 있다.
            if 조건:
               if 조건:
                  .......
            else:
               if 조건:
                  .........
 
       ① if ~ else문
           if 조건문:
              ---------              -------------------->  참(True)이나 거짓(False)이 결과로 
              조건이 만족하는 경우 실행할 명령문                                 리턴되는 식     
           else:
              조건이 만족하지 않는 경우 실행할 명령문
       ② if ~ elif ~ ...else
           동일한 변수의 값을 평가하는 경우 다양한 조건을 판단하기 위해 사용
           elif를 추가해서 조건을 정의
           elif는 갯수에 제한이 없다.
           if 조건1:
              실행할 문장1
           elif 조건2:
               실행할 문장2
           elif 조건3:
               실행할 문장3
           .......
           else:
               실행할 문장4

         [미션]
         IfExam02.py
         1. 숫자를 입력 받아 양수, 음수, 제로를 출력할 수 있도록 작성
             %d를 활용하기
            출력형식
            숫자1 : 10
            입력한 숫자는 10이며 양수입니다.
      
            숫자1 : -10
            입력한 숫자는 -10이며 음수입니다.      
 
            숫자1: 0
            입력한 숫자는 0이며 제로입니다.      

        ElifExam01.py
        2. if ~ elif를 이용해서 값을 평가하기
            - jumsu변수에 입력받은 값을 저장하여 수우미양가를 출력
               90~100 : 수, 80~89:우 , 70~79:미, 60~69:양, 0~59:가
            - 단, 0보다 작거나 100초과된 점수를 입력하면
              "잘못입력"출력

   2) 반복제어문
       ① for
           [형식]
           for 변수 in range(시작값, 종료값, 증감값):
	   반복해서 실행할 문장	

           - 실행할 횟수가 정해진 경우 사용하기 적합
           - 자료구조에 저장된 값들을 탐색하기에 적합\
           - 실행되는 횟수를 저장할 변수가 필요
           - 변수에 저장될 시작값, 종료값, 증감값을 range()를 통해 정의
           - range로 실행할 횟수를 정의하거나 자료구조를 탐색하는 경우
             자료구조를 명시할 수 있다.
           - 종료값을 실제 for문에서 사용하기 위해서는 종료값을 정의할때
              1을 더해서 정의
              range함수를 쓰는 경우 종료값-1까지만 숫자가 발생된다.
           - 시작값을 생략하면 0부터 시작
           - 증감값을 생략하면 숫자의 증감은 +1이 기본값

          [미션]
           1. forexam1.py
              출력할 단을 입력받아 입력된 구구단을 출력할 수 있도록 작성
              출력형태
              단:9
               9 * 1 = 9
               9 * 2 = 18
	  9 * 3 = 27
               ......
               9 * 9 = 81
           2. hapTest.py
               1 부터 100까지의 숫자의 총합, 홀수합, 짝수합을 출력하기
               총합:____
               홀수합:____
               짝수합:_____               

       ② while
           조건이 참인 경우 반복해서 명령문을 실행해야 하는 경우 사용

           [형식]
           while 조건식:
                반복해서 실행할 명령문
           else:
                조건이 만족하지 않는 경우 실행할 명령문


          [미션]
           1. forexam1.py를  while문으로 변경하기
           2. hapTest.py를 while문으로 변경하기
 
           제출하기

          [미션 - for중첩]
          1. 2안에 너 있다.
             2  2  2  2  2
             2  2  2  2  2
             2  2 너  2  2
             2  2  2  2  2
             2  2  2  2  2
           2. 2와 * 출력하기
             *  2  2  2  2
             2  *  2  2  2
             2  2 *  2   2
             2  2  2 *   2
             2  2  2  2  *
           3. 숫자로 정사각형 출력하기
              1     2   3  4  5
                  ..... 
              21 22 23 24 25
            4. 직사각형
               *
               **
	  *** 
	  ****
	  *****

    3) break문
        - 반복문을 빠져나오도록 처리
        - for, while문 모두 사용
        - break가 포함된 반복문이 종료된다.
    4) continue문
        - continue명령문을 만나면 continue이하 명령문은 실행이 skip
        - skip된 후 continue가 선언된 반복문의 첫 번째 문장으로 돌아가도록 처리

5. 자료구조
   - 데이터를 저장하기 위해 제공되는 구조
   - 파이썬의 자료구조는 리슽, 튜플, 딕셔너리, 집합이 있다.
   - 리스트와 튜플은 데이터에 순서가 있다.
   - 자료구조에 저장된 자료의 순서를 찾을 수 있고 접근 할 수 있다.(인덱싱)
   - 전체자료를 부분적으로 잘라서 접근할 수 있다.(슬라이싱)

6. 리스트(list) - []
  1) 특징
   - 순서가 있는 데이터 구조
   - 인덱싱과 슬라이싱 가능
   - 저장된 데이터의 수정이 가능
   - 리스트 안에 문자열, 정수, 다양한 형태의 데이터를 저장 가능
   - index로 접근
   - index는 0부터 시작
  
  2) list작성
                        변수 = [10, 20, 30, 40, 50]
   - [ ] 안에 값들을 정의
   - 값과 값은 ,로 구분
   - 리스트 안에 저장된 데이터는 index를 이용하여 엑세스
                      변수 [index]의 형태로 접근하기
  

  3) list의 요소 액세스
   - list는 index가 존재하므로 순서대로 변할 수 있도록 반복문과 작업할 수 있다. 주로 for문
        [형식]
     for 변수 in 리스트:
         반복해서 실행할 명령문

  4) list의 인덱싱(indexing)
    - 리스트에 저장된 자료의 위치를 참조해서 활용할 수 있다.
    - 리스트, 튜플, 문자열 등은 한 요소씩 인덱스를 가지고 0부터 접근할 수 있다.
    - 역순으로 접근이 가능하다.
    - 리스트, 튜플, 문자열 등은 리스트명[index]로 접근이 가능하다는 의미
    - 음수 값으로 접근이 가능 : index 는 맨 뒤에서부터 -1로 접근

  5) list의 슬라이싱(slicing)
    - 특정 구간의 자료를 리턴할 수 있도록 기능을 제공
    - 적용 방법
               리스트명[start index:end index:step]
        위와 같은 문법으로 접근하면 리스트에서 해당 범위에 맞는 값을 잘라서 리턴 
    - list1[4:10:1]       : 범위에서 end index는 end-1로 작업이 진행
         4번 인덱스부터 9번 인덱스 요소를 하나씩 순서대로 리턴
    - 슬라이싱할때 []연산자를 이용
    - start index를 생략하면 처음부터 읽는다.
    - end index를 생략하면 리스트의 끝까지 읽는다.    

    [구문예]
     리스트명[n] -> 리스트에서 n번째 요소를 리턴 ( list1[1])
     리스트명[n:m] -> 리스트의 요소 중 n번째 요소부터 m-1의 요소를 하나씩 리턴
     리스트명[:n] -> 처음부터(0) n-1번째 요소를 리턴
     리스트명[n:] -> n번부터 마지막 요소까지 리턴
     리스트명[:] -> 아무것도 명시하지 않으면 전체 요소를 리턴
     리스트명[::n] ->처음부터 끝까지 n만큼 step을 적용해서 요소를 리턴
                          n이 양수면 앞에서 부터 요소를 슬라이싱
                          n이 음수면 뒤에서 부터 요소를 슬라이싱
  6) 리스트의 값을 변경
    - index를 이용해서 지정한 위치의 요소 값을 변경할 수 있다.
       리스트[index] = 변경한 값
       -------------    ------------------     
        슬리이싱을 적용할 수 있다. ㅣ_____ 여러 개 값으로 수정하거나
                                                          새로운 리스트를 추가해서 적용할 수 있다. 
    - 슬라이싱 적용
      리스트[n:m] = 값


  7) 리스트의 연산
  8) 리스트 관리함수
    - append : 리스트를 맨 뒤에 요소를 추가
       리스트명.append(값)
    - del : 리스트에서 해당 위치의 요소를 제거
       del(리스트명[index])            -----슬라이싱도 가능
    - len : 리스트의 전체 요소의 길이를 리턴
    - count : 리스트에서 지정한 값의 갖고 있는 요소의 갯수를 리턴
         리스트명.count(값)
    - index : 지정한 값이 위치하는 리스트의 index를 리턴
         리스트명.index(값)
    - pop : 리스트의 맨 뒤의 항목을 빼서 리턴하면 리스트에서 항목을 지운다.
         리스트명.pop(값)
    - insert : 지정한 위치에 값을 삽입
              리스트.insert(위치index, 값)
    - remove : 리스트에서 지정한 값을 삭제
              리스트.remove(값)
    - sort : 리스트 항목을 정렬


[미션]
listExam04.py


  9) 이중리스트(이차원리스트)






7. 튜플(tuple) - ()
   - 순서가 있는 데이터 구조
   - 인덱싱과 슬라이싱이 가능
   - 저장된 데이터의 수정이 불가능
  1) 튜플의 생성방법
      변수 = 값1, 값2, 값3...
      변수 = (값1, 값2, 값3,...)
      tuple()함수를 이용하면 자료구조를 튜플로 변경이 가능
   

     빈 튜플 만들기
      (), tuple()

  2) 튜플의 인덱싱과 슬라이싱
  3) 데이터 수정 불가능

8. 딕셔너리(dictionary) - {}        웹 취급 데이터는 딕셔너리 방법
   - 키와 value 한쌍으로 데이터를 저장
   - 순서를 가지고 있지 않다.
   - 인덱싱과 슬라이싱이 불가능
   - 딕셔너리에 항목을 추가, 수정(value만 가능), 삭제 가능
   1) 딕셔너리 생성방법
   변수 = {key1:value1, key2:value2, key3:value3, ..........}
     - 키는 튜플의 특성처럼 변경이 불가능
    2) 딕셔너리에 저장된 데이터를 액세스
       딕셔너리변수[키]
        - get(키) : 딕셔너리에 저장된 key에 해당하는 value를 찾아서 리턴
        - keys() : 딕셔너리의 모든 키를 반환
        - value() : 딕셔너리의 모든 값을 리스트로 만들어서 리턴
        - items() : key와 value를 한쌍으로 리턴
        - in 연산자를 제공
           [형식]
             key in 딕셔너리
           => 딕셔너리 안에 해당 키가 있는지 여부를 판단해서 True/False를 리턴
  
        
9. 집합
    - 여러가지 데이터를 모아놓은 것
    - 중복이 불가능
    - {}기호를 사용하여 딕셔너리에서 키만 제외시키고 작업하는 것과 동일
    - {}로 선언되는 자료구조는 딕셔너리로 인식하기 때문에
    - 빈 집합을 만들 때 {}로 사용할 수 없다.
    - 빈 집합을 만들때 set()를 이용할 수 있다.

10. 문자열
    1)  파이썬에서 문자열 만드는 방법
      ' ', " ", ''' ''', """ """"
    2) 문자열에서 사용할 수 있는 함수
      변수 = "문자열"
      변수.함수명()
      count("문자열") => 외부에서 할당한 문자가 출력되는 횟수를 리턴
      index("문자열") => 해당문자열을 찾아서 index위치를 리턴
      find("문자열") => 해당문자열을 찾아서 index위치를 리턴
      upper() -> 대문자 변환
      lower() -> 소문자 변환
      title() -> 단어의 첫 글자를 대문자로 변경
      swapcase() -> 대문자는 소문자로, 소문자는 대문자로 변경
      replace('old문자', 'new문자열') -> old문자를 new문자로 치환
      lstrinp() -> 왼쪽 공백을 제거
      rstrinp() -> 오른쪽 공백을 제거
      strinp() -> 전체 공배글 제거
      split("분리문자열") -> 문자열을 공백이나 다른 분리문자열을 기준으로
                                     리스트로 반환하는 함수
      joing() -> 문자열을 합치는 함수
      starswith("찾을문자열") -> "찾을문자열"로 시작하면 True,
                                            그렇지 않으면 False를 반환
      endswith("찾을문자열") -> "찾을문자열"로 종료하면 True,
                                            그렇지 않으면 False를 반환
      center(숫자) : 숫자만큼 자리를 잡고 해당 문자열을 가운데 정렬
      ljust(숫자) -> 왼쪽으로 정렬
      rjust(숫자) -> 오른쪽으로 정렬
      zfill(숫자) -> 오른쪽 정렬을 하고 남는 공간을 0으로 채우기
      isdigit() -> 숫자?
      isalpha(a) -> 문자?
      isalnum() -> 숫자랑 문자?
      islower() -> 소문자?
      isupper() -> 대문자?
      isspace() -> 공백?

11. 함수
    - 반복되어 처리되는 명령문을 하나의 기능으로 묶어놓은 것
    - 함수를 선언(정의)하고 사용하기 위해서 함수를 호출해야 한다.
    - 함수의 기능을 처리하기 위해서 외부에서 값을 입력 받아서 사용할 수 있고 함수를 실행하고 난 후 실행결과가 있을 수도 있고
      없을 수도 있다.
    - 함수를 실행하기 위해서 외부에서 입력받는 값을 매개변수라 하고, 함수의 실행결과를 리턴값이라고 한다.
    - 매개변수의 개수는 0이거나 그 이상일 수 있다.
    - 리턴값은 1개(여러개인 경우 튜플이나 리스트, 딕셔너리에 담아서 리턴)
   
   1) 함수를 정의하는 방법
     define 정의하다
       def 함수명(매개변수1, 매개변수, ...) : 
                         ---------------
                                매개변수가 없는 경우에는 ()로만 정의한다.

          함수내부에서 실행할 명령문
              .......
          return 리턴할 값
          ------ 
            리턴값이 없는 경우 생략 가능    

    2) 함수를 호출하는 방법
       ⓐ 매개변수가 없고 리턴 값이 없는 함수의 호출
             함수명()
       ⓑ 매개변수가 있고 리턴값이 없는 함수의 호출
             함수명(값1, 값2,....)
       ⓒ 매개변수가 있고(혹은 없고), 리턴값이 있는 함수의 호출
            - 리턴값이 되돌아오므로 이 값을 저장할 변수를 선언해서 값을 저장
              리턴값을 저장할 변수 = 함수명(값1, 값2,....)
            - 리턴값이 되돌아오므로 이 값을 또 다른 함수안에서 바로 사용할 수 있다.
              print(함수명(값1, 값2,...))
              -------------------------
                  함수를 호출한 결과가 print함수의 매개변수로 변달



12. 모듈
13. 에러처리
14. 기본 라이브러리    
15. 객체
16. 고급 라이브러리




******오류검색 : https://stackoverflow.com/ 
******예제 : https://blog.naver.com/heaves1




리스트 [] 선형, 순서, 인덱싱, 슬라이싱, 수정가능
튜플 () 수정안됨 선형, 순서, 인덱싱, 슬라이싱
딕셔너리 {} key, value














 






          
   